package haoshi.com.shop.bean.chat;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import haoshi.com.shop.bean.chat.dao.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_BEAN".
*/
public class FileBeanDao extends AbstractDao<FileBean, String> {

    public static final String TABLENAME = "FILE_BEAN";

    /**
     * Properties of entity FileBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sign = new Property(0, String.class, "sign", true, "SIGN");
        public final static Property Filepath = new Property(1, String.class, "filepath", false, "FILEPATH");
        public final static Property IsLoad = new Property(2, int.class, "isLoad", false, "IS_LOAD");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
        public final static Property FileType = new Property(4, String.class, "fileType", false, "FILE_TYPE");
        public final static Property FileName = new Property(5, String.class, "fileName", false, "FILE_NAME");
        public final static Property Size = new Property(6, String.class, "size", false, "SIZE");
    }


    public FileBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FileBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_BEAN\" (" + //
                "\"SIGN\" TEXT PRIMARY KEY NOT NULL ," + // 0: sign
                "\"FILEPATH\" TEXT," + // 1: filepath
                "\"IS_LOAD\" INTEGER NOT NULL ," + // 2: isLoad
                "\"STATUS\" INTEGER NOT NULL ," + // 3: status
                "\"FILE_TYPE\" TEXT," + // 4: fileType
                "\"FILE_NAME\" TEXT," + // 5: fileName
                "\"SIZE\" TEXT);"); // 6: size
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileBean entity) {
        stmt.clearBindings();
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(1, sign);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(2, filepath);
        }
        stmt.bindLong(3, entity.getIsLoad());
        stmt.bindLong(4, entity.getStatus());
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(5, fileType);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(6, fileName);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(7, size);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileBean entity) {
        stmt.clearBindings();
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(1, sign);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(2, filepath);
        }
        stmt.bindLong(3, entity.getIsLoad());
        stmt.bindLong(4, entity.getStatus());
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(5, fileType);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(6, fileName);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(7, size);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FileBean readEntity(Cursor cursor, int offset) {
        FileBean entity = new FileBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sign
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filepath
            cursor.getInt(offset + 2), // isLoad
            cursor.getInt(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fileName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // size
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileBean entity, int offset) {
        entity.setSign(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFilepath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsLoad(cursor.getInt(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
        entity.setFileType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFileName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSize(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FileBean entity, long rowId) {
        return entity.getSign();
    }
    
    @Override
    public String getKey(FileBean entity) {
        if(entity != null) {
            return entity.getSign();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileBean entity) {
        return entity.getSign() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
