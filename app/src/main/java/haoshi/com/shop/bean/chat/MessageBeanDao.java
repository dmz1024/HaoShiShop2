package haoshi.com.shop.bean.chat;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import haoshi.com.shop.bean.chat.dao.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_BEAN".
*/
public class MessageBeanDao extends AbstractDao<MessageBean, String> {

    public static final String TABLENAME = "MESSAGE_BEAN";

    /**
     * Properties of entity MessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Num = new Property(3, int.class, "num", false, "NUM");
        public final static Property From = new Property(4, int.class, "from", false, "FROM");
        public final static Property Sign = new Property(5, String.class, "sign", false, "SIGN");
    }


    public MessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"NUM\" INTEGER NOT NULL ," + // 3: num
                "\"FROM\" INTEGER NOT NULL ," + // 4: from
                "\"SIGN\" TEXT UNIQUE );"); // 5: sign
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getTime());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getNum());
        stmt.bindLong(5, entity.getFrom());
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(6, sign);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getTime());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getNum());
        stmt.bindLong(5, entity.getFrom());
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(6, sign);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MessageBean readEntity(Cursor cursor, int offset) {
        MessageBean entity = new MessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getLong(offset + 1), // time
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // num
            cursor.getInt(offset + 4), // from
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // sign
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setNum(cursor.getInt(offset + 3));
        entity.setFrom(cursor.getInt(offset + 4));
        entity.setSign(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MessageBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(MessageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
