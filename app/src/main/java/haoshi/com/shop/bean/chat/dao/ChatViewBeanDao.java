package haoshi.com.shop.bean.chat.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_VIEW_BEAN".
*/
public class ChatViewBeanDao extends AbstractDao<ChatViewBean, String> {

    public static final String TABLENAME = "CHAT_VIEW_BEAN";

    /**
     * Properties of entity ChatViewBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sign = new Property(0, String.class, "sign", true, "SIGN");
        public final static Property Fid = new Property(1, String.class, "fid", false, "FID");
        public final static Property FromId = new Property(2, String.class, "fromId", false, "FROM_ID");
        public final static Property Uid = new Property(3, String.class, "uid", false, "UID");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Time = new Property(5, long.class, "time", false, "TIME");
        public final static Property IsRead = new Property(6, int.class, "isRead", false, "IS_READ");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
        public final static Property From = new Property(8, int.class, "from", false, "FROM");
    }


    public ChatViewBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChatViewBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_VIEW_BEAN\" (" + //
                "\"SIGN\" TEXT PRIMARY KEY NOT NULL ," + // 0: sign
                "\"FID\" TEXT," + // 1: fid
                "\"FROM_ID\" TEXT," + // 2: fromId
                "\"UID\" TEXT," + // 3: uid
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"TIME\" INTEGER NOT NULL ," + // 5: time
                "\"IS_READ\" INTEGER NOT NULL ," + // 6: isRead
                "\"STATUS\" INTEGER NOT NULL ," + // 7: status
                "\"FROM\" INTEGER NOT NULL );"); // 8: from
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_VIEW_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatViewBean entity) {
        stmt.clearBindings();
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(1, sign);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(2, fid);
        }
 
        String fromId = entity.getFromId();
        if (fromId != null) {
            stmt.bindString(3, fromId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(4, uid);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getTime());
        stmt.bindLong(7, entity.getIsRead());
        stmt.bindLong(8, entity.getStatus());
        stmt.bindLong(9, entity.getFrom());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatViewBean entity) {
        stmt.clearBindings();
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(1, sign);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(2, fid);
        }
 
        String fromId = entity.getFromId();
        if (fromId != null) {
            stmt.bindString(3, fromId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(4, uid);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getTime());
        stmt.bindLong(7, entity.getIsRead());
        stmt.bindLong(8, entity.getStatus());
        stmt.bindLong(9, entity.getFrom());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ChatViewBean readEntity(Cursor cursor, int offset) {
        ChatViewBean entity = new ChatViewBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sign
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fromId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uid
            cursor.getInt(offset + 4), // type
            cursor.getLong(offset + 5), // time
            cursor.getInt(offset + 6), // isRead
            cursor.getInt(offset + 7), // status
            cursor.getInt(offset + 8) // from
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatViewBean entity, int offset) {
        entity.setSign(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFromId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setTime(cursor.getLong(offset + 5));
        entity.setIsRead(cursor.getInt(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setFrom(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChatViewBean entity, long rowId) {
        return entity.getSign();
    }
    
    @Override
    public String getKey(ChatViewBean entity) {
        if(entity != null) {
            return entity.getSign();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatViewBean entity) {
        return entity.getSign() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
